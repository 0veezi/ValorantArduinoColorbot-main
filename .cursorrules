1. Aimbot Kuralları
1.1. Aimbot Aktif Edilmesi
Aimbot, kullanıcı tarafından belirlenen bir tuşa basıldığında etkinleştirilir.
Kullanıcı, settings.ini dosyasında toggleKey ile aimbot tuşunu belirleyebilir.
1.2. Hedef Renk Algılama
Ekranda belirlenen renk aralığı (HSV) içinde bir hedef algılandığında, aimbot devreye girer.
Algılanan renk, lowerColor ve upperColor değerleri ile tanımlanır.
1.3. Hedefe Hareket
Aimbot, hedefin konumuna göre fareyi hareket ettirir.
Hareket hızı, xSpeed ve ySpeed ayarları ile kontrol edilir.
1.4. Hedef Takibi
Hedef hareket ettiğinde, aimbot sürekli olarak hedefi takip eder.
Hedefin konumu, her ekran yakalamasında güncellenir.
2. Triggerbot Kuralları
2.1. Triggerbot Aktif Edilmesi
Triggerbot, kullanıcı tarafından belirlenen bir tuşa basıldığında etkinleştirilir.
Kullanıcı, settings.ini dosyasında toggleKey ile triggerbot tuşunu belirleyebilir.
2.2. Tıklama Eylemi
Hedef renk, belirlenen xRange ve yRange içinde algılandığında, triggerbot otomatik olarak tıklama yapar.
Tıklama işlemi, minDelay ve maxDelay arasında rastgele bir gecikme ile gerçekleştirilir.
3. Ekran Yakalama Kuralları
3.1. Ekran Yakalama Alanı
Ekran yakalama alanı, x ve y koordinatları ile x_fov ve y_fov değerleri kullanılarak tanımlanır.
Ekran yakalama, her aimbot veya triggerbot etkinleştirildiğinde yapılır.
3.2. Görüntü İşleme
Yakalanan görüntü, renk algılama ve hedef tespiti için işlenir.
Görüntü işleme, opencv-python kütüphanesi kullanılarak gerçekleştirilir.
4. Fare Kontrol Kuralları
4.1. Arduino ile İletişim
Fare hareketleri ve tıklama komutları, Arduino ile seri iletişim kullanılarak gönderilir.
serial kütüphanesi, Arduino ile iletişim için kullanılır.
4.2. Hareket Hesaplama
Fare hareketleri, hedefin konumu ile ekran merkezinin konumu arasındaki fark kullanılarak hesaplanır.
Hareket, xSpeed ve ySpeed ile çarpılarak gerçekleştirilir.
5. Hata Yönetimi Kuralları
5.1. Seri İletişim Hataları
Eğer Arduino ile iletişim kurulamazsa, kullanıcıya hata mesajı gösterilir ve program 10 saniye içinde kapanır.
Hata mesajı, "Colorbot is already open or Arduino is being used by another app." şeklinde olmalıdır.
5.2. Yapılandırma Hataları
settings.ini dosyası okunamazsa, kullanıcıya hata mesajı gösterilir ve program kapanır.
Hata mesajı, "Unable to load settings from settings.ini." şeklinde olmalıdır.
6. Kullanıcı Arayüzü Kuralları
6.1. Konsol Çıktıları
Uygulama başlatıldığında, kullanıcıya uygulama başlığı ve renk ayarları hakkında bilgi verilir.
Konsol çıktısı, "Enemy Outline Color: Purple" şeklinde olmalıdır.
6.2. Kullanıcı Geri Bildirimi
Kullanıcıdan alınan tuş girişleri, aimbot ve triggerbot durumunu değiştirmek için kullanılmalıdır.
Kullanıcı, aimbot ve triggerbot'un etkin olup olmadığını konsolda görebilmelidir.
7. Performans İyileştirme Kuralları
7.1. Çoklu İş Parçacığı Yönetimi
Aimbot ve triggerbot işlemleri, ayrı iş parçacıklarında çalışmalıdır.
Bu, kullanıcı arayüzünün donmasını önler ve daha akıcı bir deneyim sağlar.
7.2. Ekran Yakalama Sıklığı
Ekran yakalama işlemi, belirli bir süre aralığında (örneğin, her 50 ms) gerçekleştirilmelidir.
Bu, sistem kaynaklarının verimli kullanılmasını sağlar.
8. Gelişmiş Özellikler
8.1. Renk Seçimi
Kullanıcı, hedef rengi dinamik olarak seçebilmelidir.
Renk seçimi, bir GUI aracılığıyla yapılabilir.
8.2. Hedef Algılama Geliştirmeleri
Hedef algılama algoritması, daha fazla renk aralığı ve şekil tanıma özellikleri ile geliştirilebilir.
Bu, daha doğru hedef tespiti sağlar
     # Color detection settings (HSV)
        self.lower_color = np.array([150, 76,  123])
        self.upper_color = np.array([160, 197, 255])

        # Aimbot settings
        self.aim_enabled = self.settings.get_boolean('Aimbot', 'Enabled')
        self.aim_key = int(self.settings.get('Aimbot', 'toggleKey'), 16)
        self.x_speed = self.settings.get_float('Aimbot', 'xSpeed')
        self.y_speed = self.settings.get_float('Aimbot', 'ySpeed')
        self.x_fov = self.settings.get_int('Aimbot', 'xFov')
        self.y_fov = self.settings.get_int('Aimbot', 'yFov')
        self.target_offset = self.settings.get_float('Aimbot', 'targetOffset')

        # Triggerbot settings
        self.trigger_enabled = self.settings.get_boolean('Triggerbot', 'Enabled')
        self.trigger_key = int(self.settings.get('Triggerbot', 'toggleKey'), 16)
        self.min_delay = self.settings.get_int('Triggerbot', 'minDelay')
        self.max_delay = self.settings.get_int('Triggerbot', 'maxDelay')
        self.x_range = self.settings.get_int('Triggerbot', 'xRange')
        self.y_range = self.settings.get_int('Triggerbot', 'yRange')

        # Precomputed values
        self.kernel = np.ones((3, 3), np.uint8)
        self.screen_center = (self.x_fov // 2, self.y_fov // 2) olmalıdır.